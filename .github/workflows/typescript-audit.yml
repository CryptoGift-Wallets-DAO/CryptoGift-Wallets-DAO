name: 🔍 TypeScript Audit (Complete Analysis)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  typescript-audit:
    name: 📊 Complete TypeScript Analysis 
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 📦 Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9.15.9
        run_install: false
        
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org/'
        cache: 'pnpm'
        cache-dependency-path: pnpm-lock.yaml

    - name: 📦 Install Dependencies
      run: pnpm install --frozen-lockfile --prefer-offline
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}

    - name: 🔍 TypeScript Analysis with Exclusions
      run: |
        echo "## 🔍 TypeScript Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "### Current TypeScript Check (with exclusions)" >> $GITHUB_STEP_SUMMARY
        set +e
        pnpm run type-check > typescript-current.txt 2>&1
        current_exit_code=$?
        
        if [ $current_exit_code -eq 0 ]; then
          echo "✅ **Current build: PASSING** (0 errors in included files)" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Current build: FAILING** - Errors in included files:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -30 typescript-current.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        echo "" >> $GITHUB_STEP_SUMMARY
      continue-on-error: true

    - name: 🔍 Full TypeScript Analysis (Show Hidden Errors)  
      run: |
        echo "### Complete System Analysis (including excluded directories)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Create tsconfig without most exclusions
        cat > tsconfig.audit.json << 'EOF'
        {
          "extends": "./tsconfig.json",
          "exclude": [
            "node_modules",
            "dist", 
            "build",
            ".next",
            "coverage",
            "artifacts",
            "cache"
          ]
        }
        EOF
        
        set +e
        npx tsc --noEmit --project tsconfig.audit.json > typescript-full.txt 2>&1
        full_exit_code=$?
        
        # Count errors by directory
        echo "#### Error Count by Directory:" >> $GITHUB_STEP_SUMMARY
        echo "| Directory | Errors | Sample Error |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|---------|---------------|" >> $GITHUB_STEP_SUMMARY
        
        # Count ranking-frontend errors
        RANKING_FRONTEND_COUNT=$(grep "ranking-frontend/" typescript-full.txt | wc -l)
        RANKING_FRONTEND_SAMPLE=$(grep "ranking-frontend/" typescript-full.txt | head -1 | cut -d: -f3- || echo "No errors")
        echo "| ranking-frontend/ | $RANKING_FRONTEND_COUNT | $RANKING_FRONTEND_SAMPLE |" >> $GITHUB_STEP_SUMMARY
        
        # Count ranking-backend errors  
        RANKING_BACKEND_COUNT=$(grep "ranking-backend/" typescript-full.txt | wc -l)
        RANKING_BACKEND_SAMPLE=$(grep "ranking-backend/" typescript-full.txt | head -1 | cut -d: -f3- || echo "No errors")
        echo "| ranking-backend/ | $RANKING_BACKEND_COUNT | $RANKING_BACKEND_SAMPLE |" >> $GITHUB_STEP_SUMMARY
        
        # Count lib/agent errors
        AGENT_COUNT=$(grep "lib/agent/" typescript-full.txt | wc -l) 
        AGENT_SAMPLE=$(grep "lib/agent/" typescript-full.txt | head -1 | cut -d: -f3- || echo "No errors")
        echo "| lib/agent/ | $AGENT_COUNT | $AGENT_SAMPLE |" >> $GITHUB_STEP_SUMMARY
        
        # Count app/ errors
        APP_COUNT=$(grep "app/" typescript-full.txt | wc -l)
        APP_SAMPLE=$(grep "app/" typescript-full.txt | head -1 | cut -d: -f3- || echo "No errors") 
        echo "| app/ | $APP_COUNT | $APP_SAMPLE |" >> $GITHUB_STEP_SUMMARY
        
        # Count components/ errors
        COMPONENTS_COUNT=$(grep "components/" typescript-full.txt | wc -l)
        COMPONENTS_SAMPLE=$(grep "components/" typescript-full.txt | head -1 | cut -d: -f3- || echo "No errors")
        echo "| components/ | $COMPONENTS_COUNT | $COMPONENTS_SAMPLE |" >> $GITHUB_STEP_SUMMARY
        
        # Count scripts/ errors
        SCRIPTS_COUNT=$(grep "scripts/" typescript-full.txt | wc -l)
        SCRIPTS_SAMPLE=$(grep "scripts/" typescript-full.txt | head -1 | cut -d: -f3- || echo "No errors")
        echo "| scripts/ | $SCRIPTS_COUNT | $SCRIPTS_SAMPLE |" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Total count
        TOTAL_ERRORS=$(grep -c "error TS" typescript-full.txt || echo "0")
        echo "#### 📊 **Total TypeScript Errors: $TOTAL_ERRORS**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ $TOTAL_ERRORS -gt 0 ]; then
          echo "#### First 20 Errors (Full Details):" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          grep "error TS" typescript-full.txt | head -20 >> $GITHUB_STEP_SUMMARY || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **These errors are currently excluded from builds but represent technical debt.**" >> $GITHUB_STEP_SUMMARY
        else
          echo "🎉 **No TypeScript errors found in complete system!**" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Cleanup
        rm -f tsconfig.audit.json typescript-full.txt typescript-current.txt
      continue-on-error: true

    - name: 📊 Build Test
      run: |
        echo "### Production Build Test" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        set +e
        timeout 300 pnpm run build > build-output.txt 2>&1
        build_exit_code=$?
        
        if [ $build_exit_code -eq 0 ]; then
          echo "✅ **Production build: SUCCESS**" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Production build: FAILED**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          tail -20 build-output.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        rm -f build-output.txt
      continue-on-error: true

    - name: ✅ Analysis Complete
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "---" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Analysis Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📅 **Generated:** $(date -u)" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "🌿 **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "This analysis shows the complete TypeScript health of the project," >> $GITHUB_STEP_SUMMARY
        echo "including errors in directories excluded from normal builds." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🎯 **For Developers:** Focus on errors in included files first (affect builds)" >> $GITHUB_STEP_SUMMARY
        echo "📋 **For Planning:** Use excluded errors count for technical debt planning" >> $GITHUB_STEP_SUMMARY