name: 🔐 Solidity Security Analysis

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'contracts/**'
      - 'hardhat.config.js'
      - 'package.json'
  pull_request:
    branches: [ main ]
    paths:
      - 'contracts/**'
      - 'hardhat.config.js'

jobs:
  solidity-security:
    name: 🛡️ Smart Contract Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🔨 Compile Contracts
      run: |
        if [ -f "hardhat.config.js" ]; then
          npx hardhat compile
        else
          echo "⚠️ No Hardhat config found, skipping compilation"
        fi
        
    - name: 🐍 Setup Python for Slither
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: 📥 Install Slither
      run: |
        pip install slither-analyzer
        
    - name: 🔍 Run Slither Analysis
      run: |
        if [ -d "contracts" ]; then
          echo "🔍 Running Slither security analysis..."
          
          # Run Slither with JSON output for parsing
          slither . --json slither-report.json --exclude-dependencies || true
          
          # Also run with human-readable output
          slither . --exclude-dependencies > slither-output.txt 2>&1 || true
          
          echo "📋 Slither Analysis Results:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -100 slither-output.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          # Parse JSON report for critical issues
          if [ -f "slither-report.json" ]; then
            CRITICAL_COUNT=$(jq '[.results.detectors[] | select(.impact == "High")] | length' slither-report.json 2>/dev/null || echo "0")
            MEDIUM_COUNT=$(jq '[.results.detectors[] | select(.impact == "Medium")] | length' slither-report.json 2>/dev/null || echo "0")
            LOW_COUNT=$(jq '[.results.detectors[] | select(.impact == "Low")] | length' slither-report.json 2>/dev/null || echo "0")
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## 📊 Security Issues Summary" >> $GITHUB_STEP_SUMMARY
            echo "| Severity | Count | Status |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|---------|" >> $GITHUB_STEP_SUMMARY
            echo "| 🔴 Critical | $CRITICAL_COUNT | $([ $CRITICAL_COUNT -gt 0 ] && echo "❌ Action Required" || echo "✅ None Found") |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟡 Medium | $MEDIUM_COUNT | $([ $MEDIUM_COUNT -gt 0 ] && echo "⚠️ Review Recommended" || echo "✅ None Found") |" >> $GITHUB_STEP_SUMMARY
            echo "| 🟢 Low | $LOW_COUNT | $([ $LOW_COUNT -gt 0 ] && echo "ℹ️ Informational" || echo "✅ None Found") |" >> $GITHUB_STEP_SUMMARY
            
            # Fail CI if critical issues found
            if [ $CRITICAL_COUNT -gt 0 ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "🚨 **DEPLOYMENT BLOCKED** - Critical security issues found in smart contracts" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          fi
        else
          echo "⚠️ No contracts directory found, skipping Slither analysis"
          echo "ℹ️ Smart contract security analysis skipped - no contracts found" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: 📋 Upload Slither Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: slither-security-reports
        path: |
          slither-report.json
          slither-output.txt
        retention-days: 30
        
    - name: 🧪 Run Contract Tests
      run: |
        if [ -f "hardhat.config.js" ]; then
          echo "🧪 Running smart contract tests..."
          npx hardhat test --reporter json > test-results.json 2>&1 || true
          npx hardhat test
        else
          echo "⚠️ No Hardhat config found, skipping contract tests"
        fi
        
    - name: 📊 Generate Security Report
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔐 Smart Contract Security Status" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Slither static analysis completed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Contract compilation verified" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Security reports generated" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "_Analysis completed: $(date -u)_" >> $GITHUB_STEP_SUMMARY

  mythx-analysis:
    name: 🔮 MythX Deep Security Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: 📦 Install Dependencies
      run: npm ci
      
    - name: 🔮 MythX Analysis
      run: |
        if [ -d "contracts" ] && [ ! -z "${{ secrets.MYTHX_API_KEY }}" ]; then
          echo "🔮 Running MythX deep security analysis..."
          npx mythx analyze contracts/ --api-key ${{ secrets.MYTHX_API_KEY }} || true
          echo "ℹ️ MythX analysis completed - check MythX dashboard for results" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ MythX analysis skipped - no contracts or API key not configured"
          echo "ℹ️ Configure MYTHX_API_KEY secret for deep security analysis" >> $GITHUB_STEP_SUMMARY
        fi
      env:
        MYTHX_API_KEY: ${{ secrets.MYTHX_API_KEY }}