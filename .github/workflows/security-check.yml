name: üõ°Ô∏è Security & Quality Gate (Non-blocking)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  security-quality-check:
    name: Security & Quality Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üì¶ Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9.15.9
        run_install: false
        
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org/'
        cache: 'pnpm'
        cache-dependency-path: pnpm-lock.yaml
        
    - name: üì¶ Install Dependencies
      run: |
        echo "üîç Installing dependencies with pnpm $(pnpm --version)..."
        pnpm install --frozen-lockfile --prefer-offline
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
        
    - name: üîç TypeScript Compilation Check  
      run: |
        set -o pipefail
        echo "Running TypeScript check..."
        echo "## üîç TypeScript Build Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Run TypeScript check with proper error detection
        set +e
        pnpm run type-check > typescript-output.txt 2>&1
        TS_EXIT_CODE=$?
        set -e
        
        if [ $TS_EXIT_CODE -eq 0 ]; then
          echo "‚úÖ TypeScript compilation successful - No errors found" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ TypeScript compilation successful"
        else
          # Count total errors
          TOTAL_ERRORS=$(grep -c "error TS" typescript-output.txt || echo "0")
          echo "‚ùå **TypeScript Build: Issues Found** ($TOTAL_ERRORS errors)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Compilation Errors:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          head -30 typescript-output.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è TypeScript errors found (non-blocking)"
        fi
      continue-on-error: true
        
    - name: üßπ ESLint Security Rules
      run: |
        set -o pipefail
        echo "## üßπ ESLint Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if pnpm run lint > eslint-output.txt 2>&1; then
          echo "‚úÖ **ESLint: PASSED** - No linting issues found" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ ESLint validation successful"
        else
          echo "‚ùå **ESLint: Issues Found**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ESLint Issues:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          tail -30 eslint-output.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è ESLint found issues (non-blocking)"
        fi
      continue-on-error: true

    - name: üß™ Run Test Suite
      run: |
        set -o pipefail
        echo "## üß™ Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if pnpm run test:ci > test-output.txt 2>&1; then
          echo "‚úÖ **Tests: PASSED** - All tests successful" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Test suite passed"
        else
          echo "‚ùå **Tests: Issues Found** - Failures detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test Failures:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          tail -20 test-output.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è Test failures (non-blocking)"
        fi
      continue-on-error: true

    - name: üìä Coverage Threshold Check (70% minimum)
      run: |
        echo "## üìä Coverage Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if pnpm run test:coverage > coverage-output.txt 2>&1; then
          # Extract coverage percentage if available
          COVERAGE=$(grep -oP 'All files.*?(\d+\.?\d*)%' coverage-output.txt | tail -1 | grep -oP '\d+\.?\d*' || echo "0")
          if [ $(echo "$COVERAGE > 70" | bc -l 2>/dev/null || echo 0) -eq 1 ]; then
            echo "‚úÖ **Coverage: PASSED** ($COVERAGE% > 70% threshold)" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ Coverage threshold met: $COVERAGE%"
          else
            echo "‚ö†Ô∏è **Coverage: BELOW THRESHOLD** ($COVERAGE% < 70% required)" >> $GITHUB_STEP_SUMMARY
            echo "‚ö†Ô∏è Coverage below 70%: $COVERAGE%"
          fi
        else
          echo "‚ùå **Coverage: FAILED** - Could not generate coverage report" >> $GITHUB_STEP_SUMMARY
          echo "‚ùå Coverage generation failed"
        fi
        
    - name: üîí Security Pattern Validation (Non-blocking)
      run: |
        set -o pipefail
        # Initialize counters
        WARNINGS=0
        ERRORS=0
        
        # Load enforcement level (default to warning for CI)
        ENFORCEMENT_LEVEL="warning"
        if [ -f "../.security-config.json" ]; then
          ENFORCEMENT_LEVEL=$(node -p "JSON.parse(require('fs').readFileSync('../.security-config.json', 'utf8')).enforcement.level" 2>/dev/null || echo "warning")
        fi
        
        echo "üéöÔ∏è  CI Security enforcement level: $ENFORCEMENT_LEVEL"
        
        echo "## üîí Security Pattern Validation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check for unprotected API endpoints (App Router and Pages Router) with enhanced detection
        echo "üîç Checking for unprotected API endpoints..."
        SEARCH_PATHS=(
          "app/api"
          "src/app/api"
          "src/pages/api"
          "frontend/src/app/api"
          "frontend/src/pages/api"
        )
        
        total_api_files=0
        protected_api_files=0
        unprotected_endpoints=""
        
        echo "### API Endpoint Security Analysis:" >> $GITHUB_STEP_SUMMARY
        echo "| Directory | Total Files | Protected | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|-------------|-----------|---------|" >> $GITHUB_STEP_SUMMARY
        
        for p in "${SEARCH_PATHS[@]}"; do
          if [ -d "$p" ]; then
            dir_total=$(find "$p" -type f \( -name "*.ts" -o -name "*.tsx" \) 2>/dev/null | wc -l)
            dir_protected=0
            
            while IFS= read -r file; do
              total_api_files=$((total_api_files + 1))
              if grep -q "checkRateLimit\|verifyJWT\|ADMIN_API_TOKEN\|authMiddleware\|requireAuth" "$file" 2>/dev/null; then
                protected_api_files=$((protected_api_files + 1))
                dir_protected=$((dir_protected + 1))
              else
                unprotected_endpoints+="$file"$'\n'
              fi
            done < <(find "$p" -type f \( -name "*.ts" -o -name "*.tsx" \) 2>/dev/null)
            
            if [ $dir_total -gt 0 ]; then
              echo "| $p/ | $dir_total | $dir_protected | $([ $dir_protected -eq $dir_total ] && echo "‚úÖ All Secure" || echo "‚ö†Ô∏è Some Unprotected") |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ ! -z "$unprotected_endpoints" ]; then
          echo "‚ö†Ô∏è  **SECURITY WARNING:** $((total_api_files - protected_api_files)) unprotected API endpoints found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Unprotected Endpoints:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "$unprotected_endpoints" | head -10 >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "üìä **Recommendation:** Add rate limiting, authentication, or authorization middleware" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          WARNINGS=$((WARNINGS + 1))
        else
          echo "‚úÖ **All API endpoints are properly protected**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for sensitive data in logs (CRITICAL - always error) with enhanced patterns
        echo "üîç Checking for sensitive data patterns..."
        
        SENSITIVE_PATTERNS=(
          "console\.log.*private.*key"
          "console\.log.*secret.*[^(]"
          "console\.log.*mnemonic"
          "console\.log.*password.*[^)]"
          "console\.log.*wallet.*0x[0-9a-fA-F]{40}"
        )
        
        sensitive_found=false
        for pattern in "${SENSITIVE_PATTERNS[@]}"; do
          # Use a temp file to avoid broken pipe issues
          if grep -r "$pattern" . --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" --exclude-dir=node_modules > /tmp/grep_results.tmp 2>/dev/null && [ -s /tmp/grep_results.tmp ]; then
            if [ "$sensitive_found" = false ]; then
              echo "‚ùå **CRITICAL SECURITY ERROR:** Potential sensitive data exposure in logs" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### Sensitive Patterns Found:" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              sensitive_found=true
            fi
            head -5 /tmp/grep_results.tmp >> $GITHUB_STEP_SUMMARY 2>/dev/null || true
          fi
        done
        
        if [ "$sensitive_found" = true ]; then
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "üî¥ **CRITICAL:** This is a critical security risk that must be addressed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          ERRORS=$((ERRORS + 1))
        else
          echo "‚úÖ **No sensitive data patterns found in logs**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for missing test files (WARNING only) with better path handling
        echo "üîç Checking for missing test coverage..."
        missing_tests=0
        
        # Check for lib directories in various locations
        LIB_PATHS=(
          "frontend/src/lib"
          "src/lib"
          "lib"
          "utils"
          "src/utils"
        )
        
        for lib_path in "${LIB_PATHS[@]}"; do
          if [ -d "$lib_path" ]; then
            echo "üìÇ Checking test coverage for: $lib_path"
            find "$lib_path" -name "*.ts" -type f 2>/dev/null | while read -r lib_file; do
              base_name=$(basename "$lib_file" .ts)
              test_dirs=("test" "tests" "__tests__" "src/test" "frontend/src/test")
              
              has_test=false
              for test_dir in "${test_dirs[@]}"; do
                if [ -f "$test_dir/${base_name}.test.ts" ] || [ -f "$test_dir/${base_name}.spec.ts" ]; then
                  has_test=true
                  break
                fi
              done
              
              if [ "$has_test" = false ] && [ "$base_name" != "types" ] && [ "$base_name" != "index" ]; then
                echo "‚ö†Ô∏è  Missing test file for $lib_file"
                missing_tests=$((missing_tests + 1))
              fi
            done
          fi
        done
        
        if [ $missing_tests -gt 0 ]; then
          WARNINGS=$((WARNINGS + 1))
        fi
        
        # Generate comprehensive security summary (never fail)
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Security Check Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Count | Level |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|-------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| üîç API Endpoints Total | $total_api_files | Info |" >> $GITHUB_STEP_SUMMARY
        echo "| üîí API Endpoints Protected | $protected_api_files | $([ $protected_api_files -eq $total_api_files ] && echo "‚úÖ Good" || echo "‚ö†Ô∏è Warning") |" >> $GITHUB_STEP_SUMMARY
        echo "| ‚ö†Ô∏è Security Warnings | $WARNINGS | $([ $WARNINGS -eq 0 ] && echo "‚úÖ None" || echo "‚ö†Ô∏è Review") |" >> $GITHUB_STEP_SUMMARY
        echo "| ‚ùå Security Errors | $ERRORS | $([ $ERRORS -eq 0 ] && echo "‚úÖ None" || echo "üî¥ Critical") |" >> $GITHUB_STEP_SUMMARY
        echo "| ‚öôÔ∏è Enforcement Level | $ENFORCEMENT_LEVEL | $([ "$ENFORCEMENT_LEVEL" = "error" ] && echo "üîí Strict" || echo "üî∂ Learning") |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Calculate security score
        SECURITY_SCORE=100
        if [ $total_api_files -gt 0 ]; then
          PROTECTION_RATE=$(( (protected_api_files * 100) / total_api_files ))
          SECURITY_SCORE=$(( SECURITY_SCORE - (100 - PROTECTION_RATE) / 4 ))
        fi
        SECURITY_SCORE=$(( SECURITY_SCORE - WARNINGS * 10 - ERRORS * 25 ))
        SECURITY_SCORE=$([ $SECURITY_SCORE -lt 0 ] && echo "0" || echo "$SECURITY_SCORE")
        
        echo "#### üèÜ Overall Security Score: **${SECURITY_SCORE}%**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ $SECURITY_SCORE -gt 90 ]; then
          echo "üéâ **EXCELLENT SECURITY POSTURE** - Well protected!" >> $GITHUB_STEP_SUMMARY
        elif [ $SECURITY_SCORE -gt 70 ]; then
          echo "üü° **GOOD SECURITY POSTURE** - Minor improvements recommended" >> $GITHUB_STEP_SUMMARY
        elif [ $SECURITY_SCORE -gt 50 ]; then
          echo "üü† **MODERATE SECURITY POSTURE** - Several issues need attention" >> $GITHUB_STEP_SUMMARY
        else
          echo "üî¥ **SECURITY POSTURE NEEDS ATTENTION** - Critical issues require immediate action" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **Security check completed (non-blocking)** - Deployment allowed" >> $GITHUB_STEP_SUMMARY
        
        if [ $WARNINGS -gt 0 ] || [ $ERRORS -gt 0 ]; then
          echo "üéØ **Action Items:** Review and address security findings for better protection" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Cleanup temp files
        rm -f /tmp/grep_results.tmp typescript-output.txt eslint-output.txt
      continue-on-error: true
        
    - name: üèóÔ∏è Production Build Test
      run: |
        set -o pipefail
        echo "## üèóÔ∏è Production Build Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Run build with proper error detection
        set +e
        timeout 300 pnpm run build > build-output.txt 2>&1
        BUILD_EXIT_CODE=$?
        set -e
        
        if [ $BUILD_EXIT_CODE -eq 0 ]; then
          echo "‚úÖ **Production Build: SUCCESS** - Build completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Production build successful"
        else
          echo "‚ùå **Production Build: Issues Found** - Build errors detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Build Errors:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          tail -30 build-output.txt >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "‚ö†Ô∏è Production build issues (non-blocking)"
        fi
      continue-on-error: true
        
    - name: ‚úÖ Security Gate Status
      run: |
        echo "## üèÅ Quality & Security Gate Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã All Checks Completed (Non-blocking):" >> $GITHUB_STEP_SUMMARY
        echo "- üîç TypeScript compilation analysis" >> $GITHUB_STEP_SUMMARY
        echo "- üßπ ESLint security rules validation" >> $GITHUB_STEP_SUMMARY
        echo "- üß™ Test suite execution" >> $GITHUB_STEP_SUMMARY
        echo "- üìä Coverage threshold assessment" >> $GITHUB_STEP_SUMMARY
        echo "- üîí Security pattern validation" >> $GITHUB_STEP_SUMMARY
        echo "- üèóÔ∏è Production build verification" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ **All quality and security checks completed**" >> $GITHUB_STEP_SUMMARY
        echo "üöÄ **Deployment Status: ALLOWED** - Issues reported as non-blocking warnings" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìä **Next Steps:** Review the detailed reports above and address findings in future iterations" >> $GITHUB_STEP_SUMMARY
        
        echo "üéâ Quality & Security gate completed!"
        echo "üöÄ Deployment is allowed - all issues are non-blocking"
        echo "üìä Check Step Summary for detailed analysis"

  security-metrics:
    name: üìä Security Metrics & Dashboard
    runs-on: ubuntu-latest
    needs: security-quality-check
    if: always()
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üì¶ Install pnpm
      uses: pnpm/action-setup@v4
      with:
        version: 9.15.9
        run_install: false
        
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        registry-url: 'https://registry.npmjs.org/'
        cache: 'pnpm'
        cache-dependency-path: pnpm-lock.yaml
        
    - name: üì¶ Install Dependencies
      run: |
        echo "üîç Installing dependencies with pnpm $(pnpm --version)..."
        pnpm install --frozen-lockfile --prefer-offline
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NODE_AUTH_TOKEN }}
        
    - name: üìä Generate Security Metrics
      run: |
        set -o pipefail
        # Get test results and coverage
        COVERAGE=$(pnpm run test:coverage 2>/dev/null | grep -oP 'All files.*?(\d+\.?\d*)%' | tail -1 | grep -oP '\d+\.?\d*' || echo "0")
        TEST_RESULTS=$(pnpm run test 2>&1 | grep -oP '\d+ passed' || echo "0 passed")
        
        # Use the already calculated API metrics from the security check above
        # total_api_files and protected_api_files are already available
        
        # Analyze bypass usage
        BYPASS_COUNT=$(grep -c "\[BYPASS\]" ../.security-audit.log 2>/dev/null || echo "0")
        LAST_WEEK_BYPASSES=$(grep "\[BYPASS\]" ../.security-audit.log 2>/dev/null | tail -7 | wc -l || echo "0")
        
        # Current enforcement level
        ENFORCEMENT_LEVEL=$(node -p "JSON.parse(require('fs').readFileSync('../.security-config.json', 'utf8')).enforcement.level" 2>/dev/null || echo "warning")
        
        echo "## üõ°Ô∏è Security & Quality Dashboard" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        echo "| üìä Test Coverage | ${COVERAGE}% | $([ $(echo "$COVERAGE > 70" | bc -l 2>/dev/null || echo 0) -eq 1 ] && echo "‚úÖ Excellent" || echo "‚ö†Ô∏è Needs Improvement") |" >> $GITHUB_STEP_SUMMARY
        echo "| üß™ Test Results | $TEST_RESULTS | $(echo "$TEST_RESULTS" | grep -q "0 passed" && echo "‚ùå Failed" || echo "‚úÖ Passing") |" >> $GITHUB_STEP_SUMMARY
        echo "| üîí Protected Endpoints | ${protected_api}/${total_api} | $([ ${protected_api} -eq ${total_api} ] && echo "‚úÖ All Secure" || echo "‚ö†Ô∏è Some Unprotected") |" >> $GITHUB_STEP_SUMMARY
        echo "| üö™ Total Bypasses | $BYPASS_COUNT | $([ $BYPASS_COUNT -lt 5 ] && echo "‚úÖ Low Usage" || echo "‚ö†Ô∏è High Usage") |" >> $GITHUB_STEP_SUMMARY
        echo "| üìÖ Week Bypasses | $LAST_WEEK_BYPASSES | $([ $LAST_WEEK_BYPASSES -lt 2 ] && echo "‚úÖ Acceptable" || echo "‚ö†Ô∏è Review Needed") |" >> $GITHUB_STEP_SUMMARY
        echo "| ‚öôÔ∏è Enforcement Level | $ENFORCEMENT_LEVEL | $([ "$ENFORCEMENT_LEVEL" = "error" ] && echo "üîí Strict" || echo "‚ö†Ô∏è Learning") |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Compliance score calculation
        COMPLIANCE_SCORE=$((100 - LAST_WEEK_BYPASSES * 20))
        COMPLIANCE_SCORE=$([ $COMPLIANCE_SCORE -lt 0 ] && echo "0" || echo "$COMPLIANCE_SCORE")
        
        echo "### üìà Overall Compliance Score: ${COMPLIANCE_SCORE}%" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ $COMPLIANCE_SCORE -gt 90 ]; then
          echo "üéâ **EXCELLENT SECURITY COMPLIANCE** - Team following best practices!" >> $GITHUB_STEP_SUMMARY
        elif [ $COMPLIANCE_SCORE -gt 70 ]; then
          echo "‚úÖ **GOOD SECURITY COMPLIANCE** - Minor improvements recommended" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è **SECURITY COMPLIANCE NEEDS ATTENTION** - Review patterns and reduce bypasses" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: üîÑ Auto-Escalate Security Enforcement
      run: |
        echo "‚ö†Ô∏è Auto-escalation script not configured for DAO project"
        # node scripts/auto-escalate-security.js
        
    - name: üìã Final Status
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üéØ Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "üöÄ **Deployment allowed** - All issues are reported as non-blocking warnings" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "_Security dashboard updated: $(date -u)_" >> $GITHUB_STEP_SUMMARY
