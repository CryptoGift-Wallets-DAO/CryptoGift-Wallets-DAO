#!/usr/bin/env node

const ethers = require('ethers');
const dotenv = require('dotenv');
const path = require('path');
const fs = require('fs');

// Load environment variables
dotenv.config({ path: path.resolve(__dirname, '../.env.dao') });

// Network configuration
const NETWORK = process.argv[2] || 'baseSepolia';
const RPC_URL = NETWORK === 'base' 
  ? 'https://mainnet.base.org'
  : 'https://sepolia.base.org';
const CHAIN_ID = NETWORK === 'base' ? 8453 : 84532;
const EXPLORER = NETWORK === 'base' 
  ? 'https://basescan.org'
  : 'https://sepolia.basescan.org';

// Check required environment variables
const PRIVATE_KEY = process.env.PRIVATE_KEY_DAO_DEPLOYER;
const BASESCAN_API_KEY = process.env.BASESCAN_API_KEY;

if (!PRIVATE_KEY) {
  console.error('‚ùå PRIVATE_KEY_DAO_DEPLOYER not found in .env.dao');
  process.exit(1);
}

// Simple token contract (minimal ERC20)
const CGC_TOKEN_BYTECODE = '0x608060405234801561001057600080fd5b506040516107dd3803806107dd83398101604081905261002f91610124565b82825f9081610040919061024c565b50600190610052908261024c565b505f80546001600160a01b0319166001600160a01b0383161790556100786012610097565b61008f69d3c21bcecceda10000005f546100b960201b60201c565b505050610319565b80600a6100a58260016102f0565b6100af919061039f565b6002819055505050565b6001600160a01b0382166100e05760405163ec442f0560e01b81525f60048201526024015b60405180910390fd5b6100eb5f838361010e565b5050600380546001600160a01b0319166001600160a01b0392909216919091179055565b5050565b634e487b7160e01b5f52604160045260245ffd5b5f805f60608486031215610139575f5ffd5b83516001600160401b0381111561014e575f5ffd5b8401601f8101861361015e575f5ffd5b80516001600160401b0381111561017757610177610114565b604051601f8201601f19908116603f0116810160405281815282820192508760208501898501111561019e575f5ffd5b5f5b828110156101bb5760208186010151602084830101528401610190565b505f602083830101528095505050505060208401519150604084015190509250925092565b600181811c908216806101f557607f821691505b60208210810361021357634e487b7160e01b5f52602260045260245ffd5b50919050565b601f82111561024757805f5260205f20601f840160051c810160208510156102425750805b601f840160051c820191505b8181101561026157828155600101610250565b5050505050565b81516001600160401b0381111561028157610281610114565b6102958161028f84546101e1565b84610219565b6020601f8211600181146102c7575f84156102b05750858301515b5f19600386901b1c1916600185901b178555610261565b5f85815260208120601f198616915b828110156102f5578886015182559484019460019091019084016102d6565b508582101561031257878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b6104ba806103315f395ff3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063313ce5671161005b578063313ce5671461010957806370a082311461011857806395d89b4114610140578063a9059cbb1461014857600080fd5b806306fdde031461008d578063095ea7b3146100ab57806318160ddd146100ce57806323b872dd146100e4575b600080fd5b61009561015b565b6040516100a29190610352565b60405180910390f35b6100be6100b93660046103ba565b6101e9565b60405190151581526020016100a2565b6100d6610202565b6040519081526020016100a2565b6100be6100f23660046103e2565b5f60209081526040812080546001600160a01b031916905590565b604051601281526020016100a2565b6100d661012636600461041d565b6001600160a01b03165f9081526004602052604090205490565b610095610218565b6100be6101563660046103ba565b610227565b6000805461016890610438565b80601f016020809104026020016040519081016040528092919081815260200182805461019590610438565b80156101e05780601f106101b7576101008083540402835291602001916101e0565b820191906000526020600020905b8154815290600101906020018083116101c557829003601f168201915b50505050905090565b6000336101f7818585610234565b506001949350505050565b6000600254600a61021391906103f5565b905090565b6001805461016890610438565b6000336101f78185856102468183610253565b6101f79190610470565b9392505050565b6001600160a01b039182165f90815260056020908152604080832093909416825291909152205490565b6001600160a01b03831661029d576040516342bcdf7f60e11b815260040160405180910390fd5b6001600160a01b0382166102c45760405163d92e233d60e01b815260040160405180910390fd5b6001600160a01b038381165f90815260046020526040902054818116911681148015906102f457506002548110155b1561031d576001600160a01b0383165f908152600460205260409020805483900390556103338484846001600160a01b0316909103610470565b6001600160a01b0383165f9081526004602052604090208054820190555b827f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610344919061041d565b60405180910390a350505050565b602081525f82518060208401525f5b81811015610380576020818601810151604086840101520161036257565b505f6040828501015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011684010191505092915050565b5f5f604083850312156103cb575f5ffd5b82356001600160a01b03811681146103e1575f5ffd5b946020939093013593505050565b5f5f5f60608486031215610402575f5ffd5b5050813593602083013593506040909201359190565b5f60208284031215610429575f5ffd5b81356001600160a01b038116811461024c575f5ffd5b600181811c9082168061045357607f821691505b60208210810361046157634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561048e5761048e610467565b9291505056fea2646970667358221220';

// Connect to network
async function deploy() {
  console.log('üèõÔ∏è CryptoGift DAO - Simple Deployment');
  console.log('=====================================');
  console.log(`Network: ${NETWORK === 'base' ? 'Base Mainnet' : 'Base Sepolia'}`);
  console.log(`RPC: ${RPC_URL}`);
  console.log(`Explorer: ${EXPLORER}`);
  
  // Connect to provider
  const provider = new ethers.JsonRpcProvider(RPC_URL);
  const wallet = new ethers.Wallet(PRIVATE_KEY, provider);
  
  console.log(`Deployer: ${wallet.address}`);
  
  // Check balance
  const balance = await provider.getBalance(wallet.address);
  console.log(`Balance: ${ethers.formatEther(balance)} ETH`);
  
  if (balance < ethers.parseEther('0.01')) {
    console.error('‚ùå Insufficient balance! Need at least 0.01 ETH');
    process.exit(1);
  }
  
  // Deploy a simple test contract first
  console.log('\nüì¶ Deploying test contract...');
  
  try {
    // Deploy simple storage contract
    const bytecode = '0x608060405234801561001057600080fd5b50610150806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80632e64cec11461003b5780636057361d14610057575b600080fd5b610043610073565b60405190151581526020015b60405180910390f35b610071600480360381019061006c919061009d565b61007c565b005b60008054905090565b8060008190555050565b60008135905061009781610103565b92915050565b6000602082840312156100b3576100b26100fe565b5b60006100c184828501610088565b91505092915050565b60006100d5826100de565b9050919050565b600061ffff82169050919050565b60008115159050919050565b6000819050919050565b61010c816100f4565b811461011757600080fd5b5056fea264697066735822122047b4a7';
    
    const tx = {
      data: bytecode,
      gasLimit: 500000,
      gasPrice: ethers.parseUnits('0.001', 'gwei')
    };
    
    console.log('Sending transaction...');
    const deployTx = await wallet.sendTransaction(tx);
    console.log(`Transaction hash: ${deployTx.hash}`);
    
    console.log('Waiting for confirmation...');
    const receipt = await deployTx.wait();
    console.log(`‚úÖ Contract deployed at: ${receipt.contractAddress}`);
    console.log(`View on explorer: ${EXPLORER}/address/${receipt.contractAddress}`);
    
    // Save deployment info
    const deploymentInfo = {
      network: NETWORK,
      chainId: CHAIN_ID,
      deployer: wallet.address,
      timestamp: new Date().toISOString(),
      testContract: receipt.contractAddress,
      txHash: deployTx.hash
    };
    
    const deploymentsDir = path.join(__dirname, '../deployments');
    if (!fs.existsSync(deploymentsDir)) {
      fs.mkdirSync(deploymentsDir, { recursive: true });
    }
    
    const filename = `deployment-${NETWORK}-${Date.now()}.json`;
    fs.writeFileSync(
      path.join(deploymentsDir, filename),
      JSON.stringify(deploymentInfo, null, 2)
    );
    
    console.log(`\nüìÅ Deployment info saved to: ${filename}`);
    console.log('\nüéâ Deployment successful!');
    
  } catch (error) {
    console.error('‚ùå Deployment failed:', error.message);
    process.exit(1);
  }
}

// Run deployment
deploy().catch(console.error);