import { HardhatUserConfig } from "hardhat/config";
import "@nomicfoundation/hardhat-toolbox";
import "@nomicfoundation/hardhat-verify";
import "@nomiclabs/hardhat-solhint";
import "hardhat-contract-sizer";
import "hardhat-gas-reporter";
import "solidity-coverage";
import * as dotenv from "dotenv";
import * as path from "path";

// Load DAO-specific environment variables
dotenv.config({ path: path.resolve(__dirname, '.env.dao') });

// Validate required environment variables
const PRIVATE_KEY_DAO_DEPLOYER = process.env.PRIVATE_KEY_DAO_DEPLOYER;
if (!PRIVATE_KEY_DAO_DEPLOYER) {
  console.error("ERROR: PRIVATE_KEY_DAO_DEPLOYER not found in .env.dao");
  process.exit(1);
}

const BASESCAN_API_KEY = process.env.BASESCAN_API_KEY;
if (!BASESCAN_API_KEY) {
  console.error("ERROR: BASESCAN_API_KEY not found in .env.dao");
  process.exit(1);
}

// RPC URLs with fallbacks
const BASE_RPC_URL = process.env.ALCHEMY_BASE_RPC || process.env.BASE_RPC_URL || "https://mainnet.base.org";
const BASE_SEPOLIA_RPC_URL = process.env.ALCHEMY_SEPOLIA_RPC || process.env.BASE_SEPOLIA_RPC_URL || "https://sepolia.base.org";

// GitHub repo for source code verification
const GITHUB_REPO_URL = process.env.URL_GITHUB_REPO || "https://github.com/CryptoGift-Wallets-DAO/CryptoGift-Wallets-DAO";

const config: HardhatUserConfig = {
  solidity: {
    version: "0.8.20",
    settings: {
      optimizer: {
        enabled: true,
        runs: 200,
        details: {
          yul: true,
          yulDetails: {
            stackAllocation: true,
            optimizerSteps: "dhfoDgvulfnTUtnIf"
          }
        }
      },
      viaIR: false,
      evmVersion: "paris", // Base uses Paris EVM
      metadata: {
        bytecodeHash: "ipfs",
        appendCBOR: true
      },
      outputSelection: {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata",
            "devdoc",
            "userdoc",
            "storageLayout",
            "evm.gasEstimates"
          ],
          "": ["ast"]
        }
      }
    }
  },
  
  networks: {
    // Local development
    hardhat: {
      chainId: 31337,
      allowUnlimitedContractSize: false, // Use real limits
      mining: {
        auto: true,
        interval: 0
      },
      forking: {
        url: BASE_RPC_URL,
        enabled: false // Enable when needed for mainnet fork testing
      },
      accounts: {
        mnemonic: "test test test test test test test test test test test junk",
        count: 10,
        accountsBalance: "10000000000000000000000" // 10,000 ETH
      }
    },
    
    localhost: {
      url: "http://127.0.0.1:8545",
      chainId: 31337,
      timeout: 120000
    },
    
    // Base Mainnet - PRODUCTION
    base: {
      url: BASE_RPC_URL,
      chainId: 8453,
      accounts: [PRIVATE_KEY_DAO_DEPLOYER],
      gasPrice: "auto",
      gas: "auto",
      timeout: 180000, // 3 minutes for mainnet
      httpHeaders: {},
      verify: {
        etherscan: {
          apiUrl: "https://api.basescan.org",
          apiKey: BASESCAN_API_KEY
        }
      }
    },
    
    // Base Sepolia Testnet - TESTING
    baseSepolia: {
      url: BASE_SEPOLIA_RPC_URL,
      chainId: 84532,
      accounts: [PRIVATE_KEY_DAO_DEPLOYER],
      gasPrice: "auto",
      gas: "auto",
      timeout: 120000,
      httpHeaders: {},
      verify: {
        etherscan: {
          apiUrl: "https://api-sepolia.basescan.org",
          apiKey: BASESCAN_API_KEY
        }
      }
    }
  },
  
  // Etherscan/Basescan verification
  etherscan: {
    apiKey: {
      base: BASESCAN_API_KEY,
      baseSepolia: BASESCAN_API_KEY
    },
    customChains: [
      {
        network: "base",
        chainId: 8453,
        urls: {
          apiURL: "https://api.basescan.org/api",
          browserURL: "https://basescan.org"
        }
      },
      {
        network: "baseSepolia",
        chainId: 84532,
        urls: {
          apiURL: "https://api-sepolia.basescan.org/api",
          browserURL: "https://sepolia.basescan.org"
        }
      }
    ]
  },

  // Source verification
  sourcify: {
    enabled: true,
    apiUrl: "https://sourcify.dev/server",
    browserUrl: "https://repo.sourcify.dev"
  },
  
  // Gas reporter configuration
  gasReporter: {
    enabled: process.env.REPORT_GAS === "true",
    currency: "USD",
    gasPrice: 5, // gwei
    token: "ETH",
    coinmarketcap: process.env.COINMARKETCAP_API_KEY,
    excludeContracts: ["contracts/test/", "contracts/mocks/"],
    src: "./contracts",
    noColors: false,
    outputFile: "gas-report.txt",
    showTimeSpent: true,
    showMethodSig: true
  },
  
  // Contract sizer - Important for L2 deployment costs
  contractSizer: {
    alphaSort: false,
    runOnCompile: true,
    disambiguatePaths: false,
    strict: true,
    only: ["CGCToken", "GovTokenVault", "AllowedSignersCondition", "MerklePayouts"],
    except: ["test/", "mocks/", "interfaces/"]
  },
  
  // TypeChain
  typechain: {
    outDir: "typechain-types",
    target: "ethers-v6",
    alwaysGenerateOverloads: false,
    externalArtifacts: [],
    dontOverrideCompile: false
  },
  
  // Paths
  paths: {
    sources: "./contracts",
    tests: "./tests",
    cache: "./cache",
    artifacts: "./artifacts",
    deploy: "./scripts/deploy",
    deployments: "./deployments"
  },
  
  // Mocha test configuration
  mocha: {
    timeout: 120000,
    reporter: "spec"
  },

  // Defender (optional for future use)
  defender: {
    apiKey: process.env.DEFENDER_API_KEY || "",
    apiSecret: process.env.DEFENDER_API_SECRET || ""
  }
};

// Log configuration on startup
console.log("üèõÔ∏è CryptoGift DAO - Hardhat Configuration");
console.log("üìç Network: Base Mainnet (Chain ID: 8453)");
console.log("üîë Deployer: ", PRIVATE_KEY_DAO_DEPLOYER ? `0x${PRIVATE_KEY_DAO_DEPLOYER.slice(64)}...` : "NOT SET");
console.log("üîç Basescan API: ", BASESCAN_API_KEY ? "‚úÖ Configured" : "‚ùå Missing");
console.log("üìù Source Code: ", GITHUB_REPO_URL);
console.log("üîê Aragon DAO: 0x3244DFBf9E5374DF2f106E89Cf7972E5D4C9ac31");

export default config;